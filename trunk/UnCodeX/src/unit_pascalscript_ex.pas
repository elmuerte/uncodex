unit unit_pascalscript_ex;
{
This file has been generated by UnitParser v0.6, written by M. Knight
and updated by NP. v/d Spek.
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ROPS are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok''s conv unility

}
{$I PascalScript.inc}
interface
 
uses
   SysUtils
  ,Classes
  ,Contnrs
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
  TPSImport_miscclasses = class(TPSPlugin)
  protected
    procedure CompOnUses(CompExec: TPSScript); override;
    procedure ExecOnUses(CompExec: TPSScript); override;
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure CompileImport2(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
    procedure ExecImport2(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;

  procedure Register; 
 
implementation

procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_miscclasses]);
end;

 
{ compile-time importer function }
(*----------------------------------------------------------------------------
 Sometimes the CL.AddClassN() fails to correctly register a class, 
 for unknown (at least to me) reasons
 So, you may use the below RegClassS() replacing the CL.AddClassN()
 of the various SIRegister_XXXX calls 
 ----------------------------------------------------------------------------*)
function RegClassS(CL: TPSPascalCompiler; const InheritsFrom, Classname: string): TPSCompileTimeClass;
begin
  Result := CL.FindClass(Classname);
  if Result = nil then
    Result := CL.AddClassN(CL.FindClass(InheritsFrom), Classname)
  else Result.ClassInheritsFrom := CL.FindClass(InheritsFrom);
end;
  
  
(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_TObjectList(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TList', 'TObjectList') do
  with CL.AddClassN(CL.FindClass('TList'),'TObjectList') do
  begin
    RegisterMethod('Constructor Create;');
    RegisterMethod('Constructor Create2( AOwnsObjects : Boolean);');
    RegisterMethod('Function Add( AObject : TObject) : Integer');
    RegisterMethod('Function Extract( Item : TObject) : TObject');
    RegisterMethod('Function Remove( AObject : TObject) : Integer');
    RegisterMethod('Function IndexOf( AObject : TObject) : Integer');
    RegisterMethod('Function FindInstanceOf( AClass : TClass; AExact : Boolean; AStartAt : Integer) : Integer');
    RegisterMethod('Procedure Insert( Index : Integer; AObject : TObject)');
    RegisterMethod('Function First : TObject');
    RegisterMethod('Function Last : TObject');
    RegisterProperty('OwnsObjects', 'Boolean', iptrw);
    RegisterProperty('Items', 'TObject Integer', iptrw);
    SetDefaultPropery('Items');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TList(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TObject', 'TList') do
  with CL.AddClassN(CL.FindClass('TObject'),'TList') do
  begin
    RegisterMethod('Function Add( Item : Pointer) : Integer');
    RegisterMethod('Procedure Clear');
    RegisterMethod('Procedure Delete( Index : Integer)');
    RegisterMethod('Procedure Exchange( Index1, Index2 : Integer)');
    RegisterMethod('Function Expand : TList');
    RegisterMethod('Function Extract( Item : Pointer) : Pointer');
    RegisterMethod('Function First : Pointer');
    RegisterMethod('Function IndexOf( Item : Pointer) : Integer');
    RegisterMethod('Procedure Insert( Index : Integer; Item : Pointer)');
    RegisterMethod('Function Last : Pointer');
    RegisterMethod('Procedure Move( CurIndex, NewIndex : Integer)');
    RegisterMethod('Function Remove( Item : Pointer) : Integer');
    RegisterMethod('Procedure Pack');
    RegisterMethod('Procedure Sort( Compare : TListSortCompare)');
    RegisterMethod('Procedure Assign( ListA : TList; AOperator : TListAssignOp; ListB : TList)');
    RegisterProperty('Capacity', 'Integer', iptrw);
    RegisterProperty('Count', 'Integer', iptrw);
    RegisterProperty('Items', 'Pointer Integer', iptrw);
    SetDefaultPropery('Items');
    RegisterProperty('List', 'PPointerList', iptr);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_temp(CL: TPSPascalCompiler);
begin
  SIRegister_TList(CL);
  SIRegister_TObjectList(CL);
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure TObjectListItems_W(Self: TObjectList; const T: TObject; const t1: Integer);
begin Self.Items[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure TObjectListItems_R(Self: TObjectList; var T: TObject; const t1: Integer);
begin T := Self.Items[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TObjectListOwnsObjects_W(Self: TObjectList; const T: Boolean);
begin Self.OwnsObjects := T; end;

(*----------------------------------------------------------------------------*)
procedure TObjectListOwnsObjects_R(Self: TObjectList; var T: Boolean);
begin T := Self.OwnsObjects; end;

(*----------------------------------------------------------------------------*)
Function TObjectListCreate2_P(Self: TClass; CreateNewInstance: Boolean;  AOwnsObjects : Boolean):TObject;
Begin Result := TObjectList.Create(AOwnsObjects); END;

(*----------------------------------------------------------------------------*)
Function TObjectListCreate_P(Self: TClass; CreateNewInstance: Boolean):TObject;
Begin Result := TObjectList.Create; END;

(*----------------------------------------------------------------------------*)
procedure TListList_R(Self: TList; var T: PPointerList);
begin T := Self.List; end;

(*----------------------------------------------------------------------------*)
procedure TListItems_W(Self: TList; const T: Pointer; const t1: Integer);
begin Self.Items[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure TListItems_R(Self: TList; var T: Pointer; const t1: Integer);
begin T := Self.Items[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TListCount_W(Self: TList; const T: Integer);
begin Self.Count := T; end;

(*----------------------------------------------------------------------------*)
procedure TListCount_R(Self: TList; var T: Integer);
begin T := Self.Count; end;

(*----------------------------------------------------------------------------*)
procedure TListCapacity_W(Self: TList; const T: Integer);
begin Self.Capacity := T; end;

(*----------------------------------------------------------------------------*)
procedure TListCapacity_R(Self: TList; var T: Integer);
begin T := Self.Capacity; end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TObjectList(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TObjectList) do
  begin
    RegisterConstructor(@TObjectListCreate_P, 'Create');
    RegisterConstructor(@TObjectListCreate2_P, 'Create2');
    RegisterMethod(@TObjectList.Add, 'Add');
    RegisterMethod(@TObjectList.Extract, 'Extract');
    RegisterMethod(@TObjectList.Remove, 'Remove');
    RegisterMethod(@TObjectList.IndexOf, 'IndexOf');
    RegisterMethod(@TObjectList.FindInstanceOf, 'FindInstanceOf');
    RegisterMethod(@TObjectList.Insert, 'Insert');
    RegisterMethod(@TObjectList.First, 'First');
    RegisterMethod(@TObjectList.Last, 'Last');
    RegisterPropertyHelper(@TObjectListOwnsObjects_R,@TObjectListOwnsObjects_W,'OwnsObjects');
    RegisterPropertyHelper(@TObjectListItems_R,@TObjectListItems_W,'Items');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TList(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TList) do
  begin
    RegisterMethod(@TList.Add, 'Add');
    RegisterVirtualMethod(@TList.Clear, 'Clear');
    RegisterMethod(@TList.Delete, 'Delete');
    RegisterMethod(@TList.Exchange, 'Exchange');
    RegisterMethod(@TList.Expand, 'Expand');
    RegisterMethod(@TList.Extract, 'Extract');
    RegisterMethod(@TList.First, 'First');
    RegisterMethod(@TList.IndexOf, 'IndexOf');
    RegisterMethod(@TList.Insert, 'Insert');
    RegisterMethod(@TList.Last, 'Last');
    RegisterMethod(@TList.Move, 'Move');
    RegisterMethod(@TList.Remove, 'Remove');
    RegisterMethod(@TList.Pack, 'Pack');
    RegisterMethod(@TList.Sort, 'Sort');
    RegisterMethod(@TList.Assign, 'Assign');
    RegisterPropertyHelper(@TListCapacity_R,@TListCapacity_W,'Capacity');
    RegisterPropertyHelper(@TListCount_R,@TListCount_W,'Count');
    RegisterPropertyHelper(@TListItems_R,@TListItems_W,'Items');
    RegisterPropertyHelper(@TListList_R,nil,'List');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_temp(CL: TPSRuntimeClassImporter);
begin
  RIRegister_TList(CL);
  RIRegister_TObjectList(CL);
end;

{ TPSImport_miscclasses }
(*----------------------------------------------------------------------------*)
procedure TPSImport_miscclasses.CompOnUses(CompExec: TPSScript);
begin
  { nothing } 
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_miscclasses.ExecOnUses(CompExec: TPSScript);
begin
  { nothing } 
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_miscclasses.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_temp(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_miscclasses.CompileImport2(CompExec: TPSScript);
begin
  { nothing } 
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_miscclasses.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_temp(ri);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_miscclasses.ExecImport2(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  { nothing } 
end;

end.
 