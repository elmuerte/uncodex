[Core.Object.MaxInt]
The maximum positive int value

[Core.Object.ObjectInternal[6]]
Internal variable

[Core.Object.RF_Transactional]
Object flag<br />
Supports editor undo/redo

[Core.Object.RF_Public]
Object Flag<br />
Can be referenced by external package files

[Core.Object.Name]
The name of this object. The string representation of this value is the same like the last part of the object's string representation.

[Core.Object.Class]
The class of this object.

[Core.Object.RF_NotForClient]
ObjectFlag<br />
Don't load for game client.

[Core.Object.RF_NotForEdit]
ObjectFlag<br />
Don't load for editor.

[Core.Object.RF_NotForServer]
ObjectFlag<br />
Don't load for game server.

[Core.Object.RF_Standalone]
ObjectFlag<br />
Keep object around for editing even if unreferenced.

[Core.Object.RF_Transient]
ObjectFlag<br />
Can't be saved or loaded.

[Core.Object.Guid]
A globally unique identifier.

[Core.Object.Vector]
A point or direction vector in 3d space.

[Core.Object.Plane]
A plane definition in 3d space.

[Core.Object.Rotator]
An orthogonal rotation in 3d space.

[Core.Object.Coords]
An arbitrary coordinate system in 3d space.

[Core.Object.Range]
Used to generate random values between Min and Max

[Core.Object.RangeVector]
Vector of Ranges

[Core.Object.Scale]
A scale and sheering.

[Core.Object.ECamOrientation]
Camera orientations for Matinee

[Core.Object.EAxis]
Generic axis enum.

[Core.Object.Box]
A bounding box.

[Core.Object.BoundingVolume]
A bounding box sphere together.

[Core.Object.Matrix]
a 4x4 matrix

[Core.Object.EDetailMode]
Detail mode

[Core.Object.RandRange]
Return a random number within the given range.

[Core.Object.BeginState]
Called immediately when entering a state, while within
the GotoState call that caused the state change.

[Core.Object.EndState]
Called immediately before going out of the current state,
while within the GotoState call that caused the state change.

[Core.Object.Created]
Notifiction for object based classes only (not actors)

[Core.Object.GetItemName]
Returns the string representation of the name of an object without the package prefixes.

[Core.Object.EatStr]
Moves Num elements from Source to Dest

[Core.Object.Quat]
A quaternion.
Quaternions are a mathematical construct that represents a rotation in three dimensions. It is not as intuitive as the Euler angles that are used for most of the rotation within Unrealscript. A rotator, is a rotation using Euler angles and is the "standard" type of rotation within Unrealscript.

[Core.Object.Color]
An RGBA color

[Core.Object.InterpCurvePoint]
A single interpolation point used in the InterpCurve struct. It maps an input value to a particular output value.

[Core.Object.InterpCurve]
A struct which holds output values for a set of input values. The array which is formed is used to query for an interpolated output value for any input value.

[Core.Object.Rand]
Returns a random number ranging from 0 to Max-1.

[Core.Object.Min]
Returns the lower of the two values.

[Core.Object.Max]
Returns the higher of the two values.

[Core.Object.Clamp]
If <code>V</code> is smaller than <code>A<code>, <code>A</code> is returned. If <code>V</code> is larger than <code>B</code>, <code>B</code> is returned. In any other case <code>V</code> is returned.

[Core.Object.Abs]
Returns the absolute value (also known as the modulo) of <code>A</code>, usually written <code>|A|</code>. Eg: <code>Abs(5)== Abs(-5) == 5</code>.

[Core.Object.Sin]
Returns <code>sine( A )</code>

[Core.Object.Cos]
Returns <code>cosine( A )</code>

[Core.Object.Asin]
Inverse sine.

[Core.Object.Acos]
Inverse cosine.

[Core.Object.Tan]
Returns <code>tan( A )</code>

[Core.Object.Loge]
Returns <code>log(A)</code>, the natural logarithm

[Core.Object.Sqrt]
Returns the square root of <code>A</code>.

[Core.Object.FRand]
Returns a random number between 0 and 1.

[Core.Object.FMin]
Returns the lower of the two values.

[Core.Object.FMax]
Returns the higher of the two values.

[Core.Object.FClamp]
If <code>V</code> is smaller than <code>A</code>, <code>A</code> is returned. If <code>V</code> is larger than <code>B</code>, <code>B</code> is returned. In any other case <code>V</code> is returned.

[Core.Object.Lerp]
Returns the linear interpolation between A and B.<br />
The return value is calculated through something like this:
<code>(B - A) * Alpha + A</code>

[Core.Object.Smerp]
Returns an Alpha-smooth nonlinear interpolation between A and B.<br />
The return value seems to be calculated through something like this:
<code>(-2 * (B - A) * Alpha ** 3) + (3 * (B - A) * Alpha ** 2) + A</code>

[Core.Object.Ceil]
Returns <code>A</code> rounded off to the next higher whole number, e.g. <code>Ceil(1.8)</code> returns 2, <code>Ceil(-1.8)</code> returns -1, etc. Ceil will always round up while typecasting float to int rounds up for negative numbers and down for positive numbers, i.e. int casts simply discard everything after the decimal point.

[Core.Object.Round]
Returns <code>A</code> rounded off to the nearest whole number, e.g. pass 1.05 and it returns 1.00, 5.5 will return 6.0 etc.

[Core.Object.Len]
Returns the length of a string.

[Core.Object.InStr]
If the string t is found inside S InStr returns the starting position with the first character of S being 0. If t is not found InStr returns -1.

[Core.Object.Mid]
Returns the middle part of S, starting at character i and including j characters (or all of them if j is not specified). Note: the 1st char has the number 0, this is diffrent then in visual basic, where the 1st char is 1.

[Core.Object.Left]
Returns the <code>i</code> leftmost characters of <code>S</code>.

[Core.Object.Right]
Returns the <code>i</code> rightmost characters of <code>S</code>.

[Core.Object.Caps]
Returns <code>S</code> converted to uppercase.

[Core.Object.Chr]
Returns the character matchin the given ASCII code.

[Core.Object.Asc]
Returns the ASCII code of the first character in <code>S</code>.

[Core.Object.Divide]
Divides a string and returns the two parts.

[Core.Object.Split]
Splits a string iat the specified divider and returns the parts as a dynamic array of strings. If the input string starts with the given divider, the first element of the output array will be empty.

[Core.Object.Locs]
Returns <code>S</code> converted to lowercase.

[Core.Object.Repl]
Replaces all occurances of <code>Match</code> in string <code>Src</code>. Specify <code>true</code> for <code>bCaseSensitive</code> if matching should be case-sensitive.

[Core.Object.Eval]
Given boolean expression <code>Condition</code>, return string <code>ResultIfTrue</code> if the expression evaluates to true, otherwise return <code>ResultIfFalse</code>.

[Core.Object.ReplaceText]
Like Repl, but modifies the input string variable directly and is always case-sensitive.

[Core.Object.Log]
Writes a line to the log file. The line begins with the <code>Tag</code> or <code>"ScriptLog:"</code> if <code>Tag</code> was not specified, followed by the log string.<br />
The tags <code>'Error'</code> and <code>'Warning'</code> (and probably others, too) have a special meaning in Commandlets.

[Core.Object.Warn]
Same like <code>Log</code>, but the line starts with <code>"ScriptWarning:"</code> and contains information about the object, state and function that called Warn.

[Core.Object.Localize]
Returns the string found in <code>PackageName.int</code> in the <code>[SectionName]</code> section. Logs an error if no localization for the specified string is found.

[Core.Object.GotoState]
Switches to a new state. State code execution begins at the specified label or at <code>"Begin:"</code> if <code>Label</code> is not specified.<br />
Before the state is changed the old state's <code>EndState</code> function is called. After the state changed <code>BeginState</code> of the new state is called.

[Core.Object.IsInState]
Returns whether the object's current state is the one specified.

[Core.Object.GetStateName]
Returns the object's current state name.

[Core.Object.ClassIsChildOf]
Returns whether <code>TestClass</code> is a subclass of <code>Parentclass</code>. If the two classes are the same it returns true.

[Core.Object.IsA]
Returns whether the object's class is the specified class or a subclass. This function doesn't need a reference to the desired class, but just the class's name.

[Core.Object.Enable]
Enables a probe function.

[Core.Object.Disable]
Disables a probe function.

[Core.Object.GetPropertyText]
Returns the value of the specified property typecasted to string. It is not possible to access default properties in this manner. This is useful when you don't want any dependencies to the package of an object, but still need to access its public (i.e. neither private nor protected) properties.<br />
Usage: <code>aString=anObject.GetPropertyText("PropertyName");</code>

[Core.Object.SetPropertyText]
Assigns a value to the specified public non-constant property of an object. Only use this for properties that can be typecasted from string.<br />
Usage: <code>anObject.SetPropertyString("PropertyName", "new value");</code>

[Core.Object.GetEnum]
Returns the <code>i</code>-th element of the given enumeration, as in <code>GetEnum(enum'MyEnum', 2)</code> or an empty name of the specified index exceeds the number of elements in the enumeration.

[Core.Object.DynamicLoadObject]
Returns a reference to a specified object, loading it if necessary.

[Core.Object.SaveConfig]
Saves the current values of config and globalconfig variables of this object to the ini file and sets them as default values for the object's class.

[Core.Object.StaticSaveConfig]
Saves the default values of config and globalconfig variables of this object's class to the ini file.

[Core.Object.ResetConfig]
Resets the config and globalconfig variables of this object's class to the values stored in Default.ini or DefUser.ini.

[Core.Object.ClearConfig]
Remove this object's section from the appropriate .ini file, and reload the script defaults for this object. If <code>PropertyName</code> is specified, only remove and reload that property, if found.

[Core.Object.StaticClearConfig]
Static version of <code>ClearConfig()</code>.

[Core.Object.GetPerObjectNames]
Returns all section names that exist in the .ini file specified by <code>ININame</code> which correspond to PerObjectConfig classes.

[Core.Object.GetReferencers]
Returns a list of objects referencing the specified target object. Useful for debugging garbage collection problems.

[Core.Object.StopWatch]
For script timing. Have done some testing, having StopWatch called on <code>Tick()</code> with different values for <code>bStop</code>. <code>bStop=False</code> seems to do nothing, not showing any HUD messages, output to stdout/err, or to logfile. First call with <code>bStop=True</code> prints text <code>"UNICODE str: Time=%lf ms"</code> to output, logs <code>"Log: Unknown percent in UnUnix.cpp::wvsnprintf()."</code>, and crashes, whether there have been zero, one, or many previous calls with <code>bStop=False</code>. So far, none of this looks useful, but perhaps it needs to be used in a different context to work properly - on dedicated server, or in an Actor (my test was in an Interaction, in an "Instant Action" game).<br />
<code>StopWatch( false );</code> starts the stopwatch. <code>StopWatch( true );</code> disables and resets the timer. When you stop the timer, a line will be printed in the log stating something like: <code>Time=41.768ms.</code> This is the time that the stopwatch was at when it was stopped. This makes it appear to be very much like clock.. but the log statement that shows the stop time is not what you can really do with StopWatch.<br />
The magic of stopwatch is that when it is running it timestamps log entries. Each is stamped with the time elapsed since the timer was started. It is great for finding out the time taken throughout a function, without writing a veritable pile of clock and unclock statements, as well as adding temporary variables for them, and the works!

[Core.Object.IsOnConsole]
For console specific stuff. "Console" in this case refers to a game console. Not the console dropped down and typed into.

[Core.Object.IsSoaking]
For console specific stuff.

[Engine.Actor.bCanTeleport]
This actor can be teleported. This property must be True for Teleporters to notice the actor.

[Engine.Actor.bHidden]
Specifies, whether the actor is invisible in the game. This property has no effect in the editor.

[Engine.Actor.bNoDelete]
Specifies, that the actor can't be spawned or destroyed during the game.

[Engine.Actor.bHighDetail]
The actor only shows up in high or super high detail mode.

[Engine.Actor.bSuperHighDetail]
The actor only shows up in super high detail mode.

[Engine.Actor.bGameRelevant]
Mutators will not receive CheckReplacement and AlwaysKeep calls for the actor if this property is True.

[Engine.Actor.bShouldBaseAtStartup]
The actor tries to find another actor for its Base at level startup if its Physics property is set to either PHYS_None or PHYS_Rotating.

[Engine.Actor.bStasis]
In standalone (i.e. single player, e.g. Instant Action) games this actor should be turned off if it's not in a recently rendered zone. It will only be turned off when its Physics mode is PHYS_None or PHYS_Rotating.

[Engine.Actor.bNetNotify]
The actor wishes to be notified of replication events. The actor gets the simulated function PostNetReceive() called whenever replication occurs, e.g. in Ammunition whenever AmmoAmount gets changed.

[Engine.Actor.LifeSpan]
Specifies how long the actor will exist. This value is constantly decreased and the actor will be destroyed when it reaches 0. In this case the actor's Expired method is executed. An initial LifeSpan of 0 or explicitely setting the LifeSpan to 0 from UnrealScript disables the actor's "destruction timer". Setting it to a value greater 0 from UnrealScript enables it and the Actor will be destroyed after that time unless LifeSpan is set to 0 again before it expired.

[Engine.Actor.bCollideWhenPlacing]
The actor will collide with world geometry when placed.

[Engine.Actor.bDirectional]
Whether the editor should display an arrow to show the actor's current rotation. This has no effect in the game.

[Engine.Actor.bEdShouldSnap]
Snap to grid in the editor.

[Engine.Actor.bHiddenEd]
The actor is hidden in the editor. This has no effect in the game.

[Engine.Actor.bHiddenEdGroup]
The actor is hidden in the Group Browser. This has no effect in the editor viewports or in the game.

[Engine.Actor.bLockLocation]
Prevent the actor from being moved in the editor.

[Engine.Actor.bMovable]
Actor can be moved.

[Engine.Actor.Attached]
Array of actors attached to this actor.

[Engine.Actor.AttachmentBone]
Name of bone to which actor is attached (if attached to center of base.

[Engine.Actor.bAlwaysRelevant]
Always relevant for network.

[Engine.Actor.bAlwaysTick]
Update even when players-only.

[Engine.Actor.bAlwaysZeroBoneOffset]
If true, offset always zero when attached to skeletalmesh.

[Engine.Actor.bAnimByOwner]
Animation dictated by owner.

[Engine.Actor.Base]
Actor we're standing on.

[Engine.Actor.bBadStateCode]
Used for recovering from illegal state transitions (hack)

[Engine.Actor.bBlockPlayers]
OBSOLETE - no longer used

[Engine.Actor.bCanBeDamaged]
Can take damage.

[Engine.Actor.bClientAnim]
Don't replicate any animations - animation done client-side.

[Engine.Actor.bClientAuthoritative]
Remains ROLE_Authority on client (only valid for bStatic or bNoDelete actors).

[Engine.Actor.bClientDemoNetFunc]
True if we're client-side demo recording and this call originated from the remote.

[Engine.Actor.bClientDemoRecording]
True we are currently recording a client-side demo.

[Engine.Actor.bClientTrigger]
replicated property used to trigger client side ClientTrigger() event.

[Engine.Actor.bCollideWorld]
Collides with the world.

[Engine.Actor.bCompressedPosition]
Used by networking code to flag compressed position replication.

[Engine.Actor.bDeleteMe]
About to be deleted.

[Engine.Actor.bDemoOwner]
Demo recording driver owns this actor.

[Engine.Actor.bDemoRecording]
True we are currently demo recording.

[Engine.Actor.bDestroyInPainVolume]
Destroy this actor if it enters a pain volume.

[Engine.Actor.bDetailAttachment]
If actor is attached to Karma object, only move once a frame regardless of timestep subdivision. Only valid when bCollideActors is false.

[Engine.Actor.bDisturbFluidSurface]
Cause ripples when in contact with FluidSurface.

[Engine.Actor.bEdSnap]
Should snap to grid in UnrealEd.

[Engine.Actor.bForceSkelUpdate]
Update skeleton (and attached actor positions) even if not rendered.

[Engine.Actor.bHurtEntry]
Keep HurtRadius from being reentrant,

[Engine.Actor.bIgnoreOutOfWorld]
Don't destroy if enters zone zero.

[Engine.Actor.bIgnoreVehicles]
Ignore collisions between vehicles and this actor (only relevant if <code>bIgnoreEncroachers</code> is false).

[Engine.Actor.bInterpolating]
Performing interpolating.

[Engine.Actor.bJustTeleported]
Used by engine physics - not valid for scripts.

[Engine.Actor.bLightChanged]
Recalculate this light's lighting now.

[Engine.Actor.bNetDirty]
Set when any attribute is assigned a value in unrealscript,

[Engine.Actor.bNetInitial]
Initial network update.

[Engine.Actor.bNetInitialRotation]
Should replicate initial rotation.

[Engine.Actor.bNetOwner]
Player owns this actor.

[Engine.Actor.bNetRelevant]
Actor is currently relevant. Only valid server side, only when replicating variables.

[Engine.Actor.bNetTemporary]
Tear-off simulation in network play.

[Engine.Actor.bNoRepMesh]
Don't replicate mesh.

[Engine.Actor.bNotifyLocalPlayerTeamReceived]
Wants <code>NotifyLocalPlayerTeamReceived()</code>

[Engine.Actor.bNotOnDedServer]
Destroy if on dedicated server and <code>RemoteRole== ROLE_None</code> (emitters, etc.)

[Engine.Actor.bObsolete]
Actor is obsolete - warn level designers to remove it.

[Engine.Actor.bOnlyAffectPawns]
Optimisation - only test ovelap against pawns. Used for influences etc.

[Engine.Actor.bOnlyDirtyReplication]
If true, only replicate actor if <code>bNetDirty</code> is true - useful if no C++ changed attributes (such as physics)<br />
<code>bOnlyDirtyReplication</code> only used with <code>bAlwaysRelevant</code> actors

[Engine.Actor.bOnlyDrawIfAttached]
Don't draw this actor if not attached (useful for net clients where attached actors and their bases' replication may not be synched).

[Engine.Actor.bOnlyOwnerSee]
Only owner can see this actor.

[Engine.Actor.bOnlyRelevantToOwner]
This actor is only relevant to its owner.

[Engine.Actor.bOrientOnSlope]
When landing, orient base on slope of floor.

[Engine.Actor.bOwnerNoSee]
Everything but the owner can see this actor.

[Engine.Actor.bPathTemp]
Internal/path building.

[Engine.Actor.bPendingDelete]
Set when actor is about to be deleted (since endstate and other functions called during deletion process before <code>bDeleteMe</code> is set).

[Engine.Actor.bRepClientDemo]
True if remote client is recording demo.

[Engine.Actor.bReplicateAnimations]
Should replicate SimAnim.

[Engine.Actor.bReplicateInstigator]
Replicate instigator to client (used by bNetTemporary projectiles).

[Engine.Actor.bReplicateMovement]
If true, replicate movement/location related properties.

[Engine.Actor.Brush]
Brush if <code>DrawType=DT_Brush</code>.

[Engine.Actor.bScriptInitialized]
Set to prevent re-initializing of actors spawned during level startup

[Engine.Actor.bSelected]
Selected in UnrealEd.

[Engine.Actor.bSkipActorPropertyReplication]
f true, don't replicate actor class variables for this actor.

[Engine.Actor.bSmoothKarmaStateUpdates]
When true, karma state updates will be smoothly interpolated.

[Engine.Actor.bStatic]
Does not move or change over time. Don't let L.D.s change this - screws up net play.

[Engine.Actor.bTearOff]
If true, this actor is no longer replicated to new clients, and is "torn off" (becomes a <code>ROLE_Authority</code>) on clients to which it was being replicated.

[Engine.Actor.bTicked]
Actor has been updated.

[Engine.Actor.bTimerLoop]
Timer loops (else is one-shot).

[Engine.Actor.bTraceWater]
If true, <code>trace()</code> by this actor returns collisions with water volumes.

[Engine.Actor.bTrailerAllowRotation]
If <code>PHYS_Trailer</code> and want independent rotation control.

[Engine.Actor.bTrailerPrePivot]
If <code>PHYS_Trailer</code> and true, offset from owner by <code>PrePivot</code>.

[Engine.Actor.bTrailerSameRotation]
If <code>PHYS_Trailer</code> and true, have same rotation as owner.

[Engine.Actor.bTravel]
Actor is capable of travelling among servers.

[Engine.Actor.bUpdateSimulatedPosition]
f true, update velocity/location after initialization for simulated proxies.

[Engine.Actor.bWasSNFiltered]
Mainly for debugging - the way this actor was inserted into Octree.

[Engine.Actor.bWorldGeometry]
Collision and Physics treats this actor as world geometry.

[Engine.Actor.ColLocation]
Actor's old location one move ago. Only for debugging.

[Engine.Actor.Deleted]
Next actor in just-deleted chain.

[Engine.Actor.FluidSurfaceShootStrengthMod]
If <code>bDisturbFluidSurface== true</code>, FluidSurface's ShootStrength is multiplied by this before doing the ripples.

[Engine.Actor.HardRelMatrix]
Transform of actor in base's ref frame. Doesn't change after SetBase.

[Engine.Actor.HighDetailOverlay]
If high detail mode, use this overlay when no other overlay is active.

[Engine.Actor.Instigator]
Pawn responsible for damage caused by this actor.

[Engine.Actor.Inventory]
Inventory chain.

[Engine.Actor.LastRenderTime]
Last time this actor was rendered.

[Engine.Actor.LatentFloat]
Internal latent function use.

[Engine.Actor.Leaves]
BSP leaves this actor is in.

[Engine.Actor.Level]
Level this actor is on.

[Engine.Actor.MeshInstance]
Mesh instance.

[Engine.Actor.NetPriority]
Higher priorities means update it more frequently.

[Engine.Actor.NetUpdateFrequency]
How many net updates per seconds.

[Engine.Actor.NetUpdateTime]
Time of last update

[Engine.Actor.OctreeBox]
Actor bounding box cached when added to Octree. Internal use only.

[Engine.Actor.OctreeNodes]
Array of nodes of the octree Actor is currently in. Internal use only.

[Engine.Actor.Owner]
Owner actor.

[Engine.Actor.PendingTouch]
Actor touched during move which wants to add an effect after the movement completes.

[Engine.Actor.PhysicsVolume]
physics volume this actor is currently in.

[Engine.Actor.Projectors]
Projected textures on this actor.

[Engine.Actor.Region]
Region this actor is in.

[Engine.Actor.RelativeLocation]
Location relative to base/bone (valid if base exists).

[Engine.Actor.RelativeRotation]
Rotation relative to base/bone (valid if base exists)

[Engine.Actor.RepSkin]
Replicated skin (sets Skins[0] if not none)

[Engine.Actor.SimAnim]
Only replicated if <code>bReplicateAnimations</code> is true

[Engine.Actor.StaticMeshInstance]
Contains per-instance static mesh data, like static lighting data.

[Engine.Actor.TimerCounter]
Counts up until it reaches TimerRate.

[Engine.Actor.TimerRate]
Timer event, 0=no timer.

[Engine.Actor.Touching]
List of touching actors.

[Engine.Actor.XLevel]
Level object.

[Engine.Actor.bAutoAlignToTerrain]
Auto-align to terrain in the editor.

[Engine.Actor.bBlockActors]
Blocks other nonplayer actors.

[Engine.Actor.bBlockKarma]
Block actors being simulated with Karma.

[Engine.Actor.bBlockNonZeroExtentTraces]
Block non-zero extent actors/traces.

[Engine.Actor.bBlockZeroExtentTraces]
Block zero extent actors/traces.

[Engine.Actor.bCollideActors]
Collides with other actors.

[Engine.Actor.bPathColliding]
This actor should collide (if <code>bWorldGeometry && bBlockActors</code> is true) during path building (ignored if <code>bStatic</code> is true, as actor will always collide during path building).

[Engine.Actor.bProjTarget]
Projectiles should potentially target this actor.

[Engine.Actor.bUseCylinderCollision]
Force axis aligned cylinder collision (useful for static mesh pickups, etc.).

[Engine.Actor.CollisionHeight]
Half-height cyllinder.

[Engine.Actor.CollisionRadius]
Radius of collision cyllinder.

[Engine.Actor.AmbientGlow]
Ambient brightness, or 255=pulsing.

[Engine.Actor.AntiPortal]
Convex volume used for DT_AntiPortal.

[Engine.Actor.bAcceptsProjectors]
Projectors can project onto this actor.

[Engine.Actor.bAlwaysFaceCamera]
Actor will be rendered always facing the camera like a sprite.

[Engine.Actor.bDeferRendering]
Defer rendering if <code>DrawType</code> is <code>DT_Particle</code> or <code>Style</code> is <code>STY_Additive</code>.

[Engine.Actor.bDisableSorting]
Manual override for translucent material sorting.

[Engine.Actor.bShadowCast]
Casts static shadows.

[Engine.Actor.bStaticLighting]
Uses raytraced lighting.

[Engine.Actor.bUnlit]
Lights don't affect actor.

[Engine.Actor.bUseLightingFromBase]
Use Unlit/AmbientGlow from Base.

[Engine.Actor.ClientOverlayCounter]
Current seconds left to show overlay effect.

[Engine.Actor.ClientOverlayTimer]
Client inital time count.

[Engine.Actor.CullDistance]
0=no distance cull, < 0 only drawn at distance > 0 cull at distance.

[Engine.Actor.DrawScale]
Scaling factor, 1.0=normal size.

[Engine.Actor.DrawScale3D]
Scaling vector, <code>(1.0,1.0,1.0)</code>=normal size.

[Engine.Actor.ForcedVisibilityZoneTag]
Makes the visibility code treat the actor as if it was in the zone with the given tag.

[Engine.Actor.MaxLights]
Limit to hardware lights active on this primitive.

[Engine.Actor.Mesh]
Mesh if <code>DrawType=DT_Mesh</code>.

[Engine.Actor.OverlayMaterial]
Shader/material effect to use with skin.

[Engine.Actor.PrePivot]
Offset from box center for drawing.

[Engine.Actor.Skins]
Multiple skin support - not replicated.

[Engine.Actor.StaticMesh]
StaticMesh if <code>DrawType=DT_StaticMesh</code>

[Engine.Actor.Style]
Style for rendering sprites, meshes.

[Engine.Actor.Texture]
Sprite texture. If <code>DrawType=DT_Sprite</code>

[Engine.Actor.Event]
The event this actor causes.

[Engine.Actor.ExcludeTag[8]]
Multipurpose exclusion tag for excluding lights, projectors, rendering actors, blocking weather.

[Engine.Actor.Tag]
Actor's tag name.

[Engine.Actor.KParams]
Parameters for Karma Collision/Dynamics.

[Engine.Actor.bActorShadows]
Light casts actor shadows.

[Engine.Actor.bAttenByLife]
Attenuate light by diminishing lifespan.

[Engine.Actor.bCorona]
Light uses Skin as a corona.

[Engine.Actor.bDirectionalCorona]
(if bCorona) Make corona bigger if it faces you, and zero and 90 degrees or beyond.

[Engine.Actor.bDynamicLight]
This light is dynamic.

[Engine.Actor.bLightingVisibility]
Calculate lighting visibility for this actor with line checks.

[Engine.Actor.bSpecialLit]
Only affects special-lit surfaces.

[Engine.Actor.bBounce]
Bounces when hits ground fast.

[Engine.Actor.bFixedRotationDir]
Fixed direction of rotation.

[Engine.Actor.bHardAttach]
Uses 'hard' attachment code. <code>bBlockActor</code> and <code>bBlockPlayer</code> must also be false.<br />
This actor cannot then move relative to base (setlocation etc.).<br />
Dont set while currently based on something!<br />

[Engine.Actor.bIgnoreEncroachers]
Ignore collisions between movers and this actor.

[Engine.Actor.bIgnoreTerminalVelocity]
If <code>PHYS_Falling</code>, ignore the <code>TerminalVelocity</code> of the <code>PhysicsVolume</code>.

[Engine.Actor.bRotateToDesired]
Rotate to DesiredRotation.

[Engine.Actor.Buoyancy]
Water buoyancy.

[Engine.Actor.DesiredRotation]
Physics will smoothly rotate actor to this rotation if <code>bRotateToDesired</code>.

[Engine.Actor.Location]
Actor's location; use Move to set.

[Engine.Actor.Mass]
Mass of this actor.

[Engine.Actor.RotationRate]
Change in rotation per second.

[Engine.Actor.AmbientSound]
Ambient sound effect.

[Engine.Actor.bFullVolume]
Whether to apply ambient attenuation.

[Engine.Actor.SoundOcclusion]
Sound occlusion approach.

[Engine.Actor.SoundPitch]
Sound pitch shift, 64.0=none.

[Engine.Actor.SoundRadius]
Radius of ambient sound.

[Engine.Actor.SoundVolume]
Volume of ambient sound.

[Engine.Actor.TransientSoundRadius]
Default sound radius for regular sounds (can be overridden in playsound).

[Engine.Actor.TransientSoundVolume]
Default sound volume for regular sounds (can be overridden in playsound).

[Engine.Actor.ELightEffect]
Spatial light effect to use.

[Engine.Actor.ELightType]
Light modulation.

[Engine.Actor.EMusicTransition]
Music transitions.

[Engine.Actor.ERenderStyle]
Style for rendering sprites, meshes.

[Engine.Actor.ESoundOcclusion]
Sound occlusion

[Engine.Actor.ETravelType]
Travelling from server to server.
<dl>
<dt>TRAVEL_Absolute</dt><dd>Absolute URL.</dd>
<dt>TRAVEL_Partial</dt><dd>Partial (carry name, reset server).</dd>
<dt>TRAVEL_Relative</dt><dd>Relative URL.</dd>
</dl>

[Engine.Actor.AnimRep]
Animation replication (can be used to replicate channel 0 anims for dumb proxies)

[Engine.Actor.AnimRep.AnimRate]
note that with compression, max replicated animrate is 4.0

[Engine.Actor.AnimRep.TweenRate]
note that with compression, max replicated tweentime is 4 seconds

[Engine.Actor.KSimParams]
Scary internal params used by Karma. BE VERY CAREFUL!!<br />
NB. These take affect until you quit the game! Make sure you reset them to defaults when leaving mod etc.

[Engine.Actor.KSimParams.GammaPerSec]
Relaxation constant. Making it larger pushes things apart harder when they penetrate.

[Engine.Actor.KSimParams.Epsilon]
Global constraint compliance. Making it larger makes contacts/joints softer.

[Engine.Actor.KSimParams.PenetrationOffset]
Resting penetration. Making this larger can reduce jiggling.

[Engine.Actor.KSimParams.PenetrationScale]
Artificially increase penetration - makes contacts 'stiffer'

[Engine.Actor.KSimParams.ContactSoftness]
Softness of just contact constraints.

[Engine.Actor.KSimParams.MaxPenetration]
Maximum penetration allowed.

[Engine.Actor.KSimParams.MaxTimestep]
Maximum timestep ever used to advance rigid body simulation.

[Engine.Actor.PointRegion]
Identifies a unique convex volume in the world.

[Engine.Actor.PointRegion.Zone]
Zone

[Engine.Actor.PointRegion.iLeaf]
Bsp leaf.

[Engine.Actor.PointRegion.ZoneNumber]
Zone Number.

[Engine.Actor.ProjectorRenderInfoPtr]
Hack to to fool C++ header generation...

[Engine.Actor.AddToPackageMap]
Add PackageName to the packagemap (as if it was in GameEngine's ServerPackages list)<br />
If omitted, adds this actor's package<br />
This function is only valid during initialization (between <code>GameInfo::InitGame()</code> and <code>GameInfo::SetInitialState()</code>)<br />
If called outside of that window, or anytime on a client, the function returns without doing anything<br />

[Engine.Actor.AllActors]
Avoid using <code>AllActors()</code> too often as it iterates through the whole actor list and is therefore slow.

[Engine.Actor.BasedActors]
Returns all actors based on the current actor (slow, like AllActors)

[Engine.Actor.BecomeViewTarget]
Called by PlayerController when this actor becomes its ViewTarget.

[Engine.Actor.BroadcastLocalizedMessage]
Broadcast a localized message to all players.<br />
Most message deal with 0 to 2 related PRIs.<br />
The LocalMessage class defines how the PRI's and optional actor are used.<br />

[Engine.Actor.ChildActors]
ChildActors() returns all actors owned by this actor.  Slow like AllActors()

[Engine.Actor.ClientTrigger]
Called on client whenever bClientTrigger changes values

[Engine.Actor.CollidingActors]
CollidingActors() returns colliding (<code>bCollideActors==true</code>) actors within a certain radius.
Much faster than AllActors() for reasonably small radii since it uses the collision hash

[Engine.Actor.ConsoleCommand]
Execute a console command in the context of the current level and game engine.

[Engine.Actor.CopyObjectToClipboard]
Copy the specified object's properties to the clipboard. The format generated is for pasting into the editor if it's an actor or into the defaultproperties block of a class if it isn't.

[Engine.Actor.Destroy]
Destroy this actor. Returns true if destroyed, false if indestructable.<br />
Destruction is latent. It occurs at the end of the tick.

[Engine.Actor.DisplayDebug]
List important actor variable on canvas.  HUD will call DisplayDebug() on the current ViewTarget when the ShowDebug exec is used.

[Engine.Actor.DrawDebugCircle]
SLOW! Use for debugging only!

[Engine.Actor.DrawDebugLine]
SLOW! Use for debugging only!

[Engine.Actor.DrawDebugSphere]
SLOW! Use for debugging only!

[Engine.Actor.DrawStayingDebugLine]
SLOW! Use for debugging only!

[Engine.Actor.DynamicActors]
DynamicActors() only iterates through the non-static actors on the list (still relatively slow, bu
much better than AllActors).  This should be used in most cases and replaces AllActors in most of
Epic's game code.

[Engine.Actor.EndedRotation]
Called when rotation completes

[Engine.Actor.Error]
Handle an error and kill this one actor.

[Engine.Actor.GetHumanReadableName]
Returns the human readable string representation of an object.

[Engine.Actor.GetLocalString]
Get localized message string associated with this actor.

[Engine.Actor.GetSoundDuration]
Get a sound duration.

[Engine.Actor.HurtRadius]
Hurt locally authoritative actors within the radius.

[Engine.Actor.IsStationary]
for AI... bots have perfect aim shooting non-pawn stationary targets.

[Engine.Actor.KAddImpulse]
A position of (0,0,0) applies impulse at COM (ie no angular component).

[Engine.Actor.KApplyForce]
Event called just before sim to allow user to<br />
NOTE: you should ONLY put numbers into Force and Torque during this event!!!!<br />

[Engine.Actor.KDrawRigidBodyState]
SLOW! Use for debugging only!

[Engine.Actor.KGetCOMPosition]
Get actual position of actors COM in world space

[Engine.Actor.KImpact]
Event called when Karmic actor hits with impact velocity over <code>KImpactThreshold</code>.

[Engine.Actor.KSkelConvulse]
Event called when a ragdoll convulses (see KarmaParamsSkel)

[Engine.Actor.KUpdateState]
This is called from inside C++ physKarma at the appropriate time to update state of Karma rigid body.<br />
If you return true, newState will be set into the rigid body. Return false and it will do nothing.

[Engine.Actor.KVelDropBelow]
Event called when karma actor's velocity drops below <code>KVelDropBelowThreshold</code>

[Engine.Actor.MakeNoise]
Inform other creatures that you've made a noise they might hear (they are sent a HearNoise message).
Senders of MakeNoise should have an instigator if they are not pawns.

[Engine.Actor.MatchStarting]
Called when gameplay actually starts.

[Engine.Actor.NearSpot]
NearSpot() returns true is spot is within collision cylinder.

[Engine.Actor.NotifyLocalPlayerTeamReceived]
Called only if <code>bNotifyLocalPlayerTeamReceived</code> and is a net client when local playercontroller receives <code>PlayerReplicationInfo.Team</code>

[Engine.Actor.PawnBaseDied]
This actor is based on a pawn and that pawn has just died.

[Engine.Actor.PlayerCanSeeMe]
PlayerCanSeeMe returns true if any player (server) or the local player (standalone or client) has a line of sight to actor's location.

[Engine.Actor.PlayMusic]
Only used for level music - will be stopped when level changes<br />
Song parameter should not include extension (assumes .ogg)

[Engine.Actor.PlayOwnedSound]
Play a sound effect, but don't propagate to a remote owner (he is playing the sound clientside)

[Engine.Actor.PlaySound]
Play a sound effect.

[Engine.Actor.PlayStream]
Used for playing custom music - not cached, and will not be stopped at level transition<br />
Song parameter must contain extension, but can be relative or absolute directory<br />
ex: <code>PlayStream("D:\\alongtheway.mp3",false,1,0,0);</code>

[Engine.Actor.PostBeginPlay]
Called immediately after gameplay begins.

[Engine.Actor.PostLoadSavedGame]
Is called right after a saved game is loaded.

[Engine.Actor.PostNetBeginPlay]
Called after PostBeginPlay.  On a net client, PostNetBeginPlay() is spawned after replicated variables have been initialized to their replicated values

[Engine.Actor.PostTouch]
Called for PendingTouch actor after physics completes

[Engine.Actor.POVChanged]
Called by PlayerController from on its current ViewTarget when its ViewTarget and/or bBehindView change.

[Engine.Actor.PreBeginPlay]
Called immediately before gameplay begins.

[Engine.Actor.PreSaveGame]
is called right before game is saved.

[Engine.Actor.RadiusActors]
RadiusActors() returns all actors within a give radius.  Slow like AllActors().  Use CollidingActors() or VisibleCollidingActors() instead if desired actor types are visible (not bHidden) and in the collision hash (<code>bCollideActors</code> is true)

[Engine.Actor.RanInto]
Called for encroaching actors which successfully moved the other actor out of the way.

[Engine.Actor.RenderOverlays]
Called by player's hud to request drawing of actor specific overlays onto canvas

[Engine.Actor.Reset]
Reset actor to initial state - used when restarting level without reloading.

[Engine.Actor.MAXSTEPHEIGHT]
Maximum step height walkable by Pawns

[Engine.Actor.MINFLOORZ]
Minimum Z value for floor normal. Anything that's less, isn't a walkable floor. (0.7 corresponds to about 45 degree angle for floor)

[Engine.Actor.EDoubleClickDir]
Double click move direction.<br />
Used to remember the dodging state of a player. This will be reset to DCLICK_None when the player lands.
<dl>
<dt>DCLICK_None</dt><dd>No dodging move started.</dd>
<dt>DCLICK_Active</dt><dd>In dodging move.</dd>
<dt>DCLICK_Done</dt><dd>Dodging move done.</dd>
</dl>

[Engine.Actor.EDrawType]
The DrawType enumneration sets how the actor displays. Some of these options work with another property to set what is displayed.
<dl>
<dt>DT_None</dt>
<dd>The actor isn't displayed at all. <code>bHidden</code> instead in most cases because it will allow the actor to still show up in UnrealEd.</dd>
<dt>DT_Sprite</dt>
<dd>Display a sprite with the material set in the Texture property.</dd>
<dt>DT_Mesh</dt>
<dd>Display the mesh set in the Mesh property.</dd>
<dt>DT_Brush</dt>
<dd>Only for Brush classes.</dd>
<dt>DT_RopeSprite</dt>
<dt>DT_VerticalSprite</dt>
<dt>DT_Terraform</dt>
<dt>DT_SpriteAnimOnce</dt>
<dd>Like DT_Sprite, but plays an animated texture's animation at a speed that plays the animation exactly once during the LifeSpan of the actor. </dd>
<dt>DT_StaticMesh</dt>
<dd>Display the static mesh set in the StaticMesh property.</dd>
<dt>DT_DrawType</dt>
<dt>DT_Particle</dt>
<dd>Used by particle effect actors (Emitter, xEmitter, xWeatherEffect) and xProcMeshes.</dd>
<dt>DT_AntiPortal</dt>
<dd>Used for Antiportals.</dd>
<dt>DT_FluidSurface</dt>
<dd>Used by FluidSurfaceInfos. See Fluid Surfaces.</dd>
</dl>

[Engine.Actor.EFlagState]
States of CTF flags.
<dl>
<dt>FLAG_Home</dt><dd>The flag is in its base.</dd>
<dt>FLAG_HeldFriendly</dt><dd>The flag is being held by a member of the flag's team.</dd>
<dt>FLAG_HeldEnemy</dt><dd>The flag is being held by a member of the enemy team.</dd>
<dt>FLAG_Down</dt><dd>The flag has been dropped.</dd>
</dl>

[Engine.Actor.EForceType]
<dl>
<dt>FT_None</dt><dd>This actor of doesn't apply any force to emitter particles.</dd>
<dt>FT_DragAlong</dt><dd>This actor drags emitter particles with it.</dd>
<dt>FT_Constant</dt><dd>This actor applies a constant force to emitter particles.</dd>
</dl>

[Engine.Actor.ENetRole]
Net variables.
<dl>
<dt>ROLE_None</dt><dd>
This means that none of the actor's attributes will not be replicated at all. Examples for this kind of actors are the GameInfo, Mutators and GameRules as well as some explosion effects and decals in UT. Note that Actor's with this role can still be instantiated on network game clients if spawned from the right function. For example if an Actor with <code>ROLE_None</code> is instantiated from a <code>simulated event PostBeginPlay()</code> function it will be created on both the server and the client as this function is invoked on both. However the server-side Actor and the client-side Actor are two completely independant entities. This means that destroying the actor on the server will not destroy the actor on the client (and vice-versa).
</dd>
<dt>ROLE_DumbProxy</dt><dd>The actor is replicated, but can't execute any functions on the remote side. It will update when variables are replicated to it but will not attempt to interpolate.</dd>
<dt>ROLE_SimulatedProxy</dt><dd>The actor is replicated and may execute simulated functions and simulated state code on the remote side. Often this kind of actor simulates its behavior based on initially replicated properties without (much) further "help" from the server.</dd>
<dt>ROLE_AutonomousProxy</dt><dd>
Autonomous proxies come with some more magic built-in. They are basically simulated proxies, but may execute simulated and non-simulated functions on the client owning/controlling this actor (only on that client!).
In UT only PlayerPawns are autonomous proxies, in UT2003 only PlayerControllers are. Every other client sees them as a regular simulated proxy. Player-controlled actors, such as the guided redeemer missile (GuidedWarshell in UT or RedeemerWarhead in UT2003) are autonomous proxies on the controlling player's client, too.
</dd>
<dt>ROLE_Authority</dt><dd>
All functions can be executed. This role is only allowed on the machine the actor was spawned on. All actors on the server or in standalone games have <code>Role== ROLE_Authority</code>. Never manually set the <code>RemoteRole</code> on the authorative version of an actor or the <code>Role</code> on a replicated version of the actor to this value.
</dd>
</dl>

[Engine.Actor.EPhysics]
Actor's PhysicsType is set in the Physics property. Use the <code>SetPhysics() method to change.</code>
<dl>
<dt>PHYS_CinMotion</dt><dd>(new in UT2003)</dd>
<dt>PHYS_Falling</dt><dd>Automatically applies the gravity of the current zone.  Pawn-set acceleration in the Z direction is ignored.</dd>
<dt>PHYS_Flying</dt><dd>The Pawn or Actor can move independantly from gravity. Velocity on the Z axis is ignored.</dd>
<dt>PHYS_Hovering</dt><dd>This is is a fun Physics type. When you an actors physics to <code>PHYS_Hovering</code>, it, er, hovers a few UU off the ground. If you do this to an xPawn, for example, it will act kind of like a hovercraft. Friction is reduced (so you slide around, and slide down ramps), and if you go at speed up an incline you can do some massive jumps.</dd>
<dt>PHYS_Interpolating</dt><dd>Used in conjunction with <code>bInterpolating</code> in Actor.  Seems to also use the <code>PhysRate</code> and <code>PhysAlpha</code> parameters. Seems to be a leftover from the pre-Matinee days.</dd>
<dt>PHYS_Karma</dt><dd>Signals an Actor is to be effected by the Karma engine.</dd>
<dt>PHYS_KarmaRagDoll</dt><dd>This is used for dead pawns.</dd>
<dt>PHYS_Ladder</dt><dd>Applies to an Actor when they are climbing a ladder. </dd>
<dt>PHYS_MovingBrush</dt><dd>Used for Movers</dd>
<dt>PHYS_None</dt><dd>No native physics code is applied.</dd>
<dt>PHYS_Projectile</dt><dd>Uses velocities on all 3 axes but DOES NOT use the current Zone's ZoneGravity and ZoneFluidFriction members to adjust velocity. This means that actors with a velocity are not affected by gravity or friction. Actors with this physics setting do not have any freedom of movement.</dd>
<dt>PHYS_Rolling</dt><dd>(removed in UT2003)</dd>
<dt>PHYS_RootMotion</dt><dd>(new in UT2003)</dd>
<dt>PHYS_Rotating</dt><dd>Only rotation changes.  Location doesn't change.  If <code>bRotateToDesired</code> is false, then the Actor rotates according to <code>RotationRate</code>.  If <code>bRotateToDesired</code> is true, then the Actor rotates to the rotation specified by <code>DesiredRotation</code> at the speed specified by <code>RotationRate</code>.</dd>
<dt>PHYS_Spider</dt><dd>Similar to <code>PHYS_Walking</code> except it applies to an Actor against any surface, not just a "ground" surface. An Actor in <code>PHYS_Spider</code> will move against a horizontal or vertical surface just like in <code>PHYS_Walking</code>. When the end of the surface is reached the Pawn will be set to <code>PHYS_Falling</code>. <code>PHYS_Spider</code> only works on one plane, it will not allow a Pawn to move across perpendicular walls.</dd>
<dt>PHYS_Swimming</dt><dd>Similar to <code>PHYS_Flying</code>, but also take the zone's FluidFriction into account.</dd>
<dt>PHYS_Trailer</dt><dd>Used to set an Actor to follow its Owner. An Actor set this way has no physics of its own, (*including collision) and simply follow their Owner around. NOTE: There are two settings in the Actor class which can specify the actions of a <code>PHYS_Trailer</code>. First is <code>bTrailerPrePivot</code>, which, when set to True, causes the Actor in <code>PHYS_Trailer</code> to be positioned away from its Owner by the vector value set in <code>PrePivot</code>. If not set or left at 0, the Actor in <code>PHYS_Trailer</code> will have the same location as its Owner. Secondly, there is <code>bTrailerSameRotation</code>, which causes the Actor in <code>PHYS_Trailer</code> to have the same Rotation as its Owner no matter where it is.</dd>
<dt>PHYS_Walking</dt><dd>Native physics code for Pawn class only. Applies all the things that make a pawn move around on the ground. Must have a Base set, without a Base to walk on, this turns to <code>PHYS_Falling</code>.</dd>
</dl>

[Engine.Actor.Sleep]
Waits for the specified amount of time before returning.<br />
Latent function, can only be used in state code.

[Engine.Actor.SetLocation]
This function sets the location of the actor it is called on. It will not work on actors with <code>PHYS_Karma</code> or <code>PHYS_KarmaRagdoll</code>. If the actor cannot occupy the new location because it is colliding with an actor that can block it, it will be placed at the nearest valid location. Note that because Terrain has no "volume" and is just a bent up sheet, the actor may not be moved in this manner when it penetrates terrain.

[Engine.Actor.SetRotation]
This function sets the rotation of the actor it is called on. It will not work on actors with <code>PHYS_Karma</code> or <code>PHYS_KarmaRagdoll</code>.

[Engine.Actor.SetRelativeRotation]
Sets the rotation relative to the actor's base.

[Engine.Actor.AnimEnd]
Notification that the current animation has ended. Allows an object to wait for animation completion before proceeding with other activities.

[Engine.Actor.KAddBoneLifter]
Note you MUST turn collision off (<code>KSetBlockKarma</code>) before using bone lifters.

[Engine.Actor.KRemoveAllBoneLifters]
Used for only allowing a fixed maximum number of ragdolls in action.

[Engine.Actor.Clock]
This is called at the beginning of a section of code to be timed. The variable time does not need to be initialized.

[Engine.Actor.UnClock]
This is called at the end of a section of code to be timed passing in the same time variable supplied to Clock.

[Engine.Actor.SetTimer]
Causes <code>Timer()</code> events every <code>NewTimerRate</code> seconds. If <code>bLoop</code> is true, causes <code>Timer()</code> events every <code>NewTimerRate</code> seconds. Otherwise, causes <code>Timer()</code> to be called once in <code>NewTimerRate</code> seconds. <code>SetTimer(0.0, False);</code> stops the timer.

[Engine.Actor.LostChild]
Called when another actor with this actor as its owner is destroyed.

[Engine.Actor.PostNetReceive]
If <code>bNetNotify</code> is True, this event is called when the actor receives an update to any variable through replication.

[Engine.Actor.FinishedInterpolation]
The implementation in actor only sets <code>bInterpolating</code> to false.

[Engine.Actor.FellOutOfWorld]
Sets physics to none and destroys the actor.

[Engine.Actor.Trace]
This traces a path to find what it collides with first. The line will be traced starting at <code>TraceStart</code> and ending at <code>TraceEnd</code>.
If <code>bTraceActors</code> is true, actors will be considered for the tracing, otherwise only pieces of the world (terrain, staticmeshactors, BSP) will be considered for collision.
When the trace hits something, <code>HitLocation</code> and <code>HitNormal</code> will be set to contain the location and normal of the impact. If specified, the material of the surface hit can also be returned. If an <code>Extent</code> is specified, you can have the trace have "width." It will have a box of the size specified as a vector (corner to corner) as the "thickness" of the trace. <br />
Note that traces are not very fast, so should be avoided or kept to a minimum where possible. <br />
Note that if you want actors to be considered for traces they must be able to block the trace, either by <code>bCollideActors</code>, or easier with <code>bBlockZeroExtentTraces</code> or <code>bBlockNonZeroExtentTraces</code> if your trace uses extents.

[Engine.Actor.FastTrace]
Similar to trace, this one returns true if it hits the world geometry, false if it is not long enough. It will pass right through anything that is not set as world geometry.

[Engine.Actor.Spawn]
Spawn an actor. Returns an actor of the specified class, not of class Actor (this is hardcoded in the compiler). <br />
Returns None if the actor could not be spawned (either the actor wouldn't fit in the specified location, or the actor list is full). <br />
Defaults to spawning at the spawner's location.

[Engine.Actor.TornOff]
Networking - called on client when actor is torn off (<code>bTearOff==true</code>)

[Engine.Actor.StopFeedbackEffect]
Pass no parameter or "" to stop all.

[Engine.Actor.SetDisplayProperties]
Set the display properties of an actor.  By setting them through this function, it allows
the actor to modify other components (such as a Pawn's weapon) or to adjust the result
based on other factors (such as a Pawn's other inventory wanting to affect the result)

[Engine.Actor.SetInitialState]
Called after PostBeginPlay.

[Engine.Actor.ShouldBeHidden]
Check if class has HideDropDown specifier

[Engine.Actor.StartInterpolation]
When this function is called, the actor will start moving along an interpolation path beginning at Dest

[Engine.Actor.TimerPop]
Since Volumes are static, VolumeTimer can be used to get timer notifications (1sec steps).

[Engine.Actor.TouchingActors]
Returns all actors touching the current actor (fast).

[Engine.Actor.TraceActors]
Return all actors along a traced line.  Reasonably fast (like any trace)

[Engine.Actor.TraceThisActor]
Line check just against this actor. Returns true if did not hit this actor.

[Engine.Actor.TravelPostAccept]
Called when carried into a new level, after AcceptInventory.

[Engine.Actor.TravelPreAccept]
Called when carried onto a new level, before AcceptInventory.

[Engine.Actor.UpdateAnnouncements]
Preload all announcer phrases used by this actor.

[Engine.Actor.UsedBy]
Called if this Actor was touching a Pawn who pressed Use

[Engine.Actor.VisibleActors]
Returns all visible (not <code>bHidden</code>) actors within a radius for which a trace from <code>Loc</code> (which defaults to caller's <code>Location</code>) to that actor's <code>Location</code> does not hit the world.<br />
Slow like <code>AllActors()</code>. Use <code>VisibleCollidingActors()</code> instead if desired actor types are in the collision hash (<code>bCollideActors</code> is true)

[Engine.Actor.VisibleCollidingActors]
Returns all colliding (<code>bCollideActors==true</code>) actors within a certain radius for which a trace from <code>Loc</code> (which defaults to caller's Location) to that actor's Location does not hit the world.<br />
Much faster than <code>AllActors()</code> since it uses the collision hash

[Engine.GameInfo.AccessControl]
AccessControl controls whether players can enter and/or become admins.

[Engine.GameInfo.AccessControlClass]
The AccessControl class to spawn.

[Engine.GameInfo.AutoAim]
How much autoaiming to do (1=none, 0 = always).

[Engine.GameInfo.bAllowVehicles]
Are vehicles allowed in this gametype?

[Engine.GameInfo.BaseMutator]
Linked list of Mutators (for modifying actors as they enter the game)

[Engine.GameInfo.bCanChangeSkin]
Allow player to change skins in game.

[Engine.GameInfo.BeaconName]
Identifying string used for finding LAN servers.

[Engine.GameInfo.bEnableStatLogging]
If True, games will log

[Engine.GameInfo.bGameEnded]
Set when game ends.

[Engine.GameInfo.bIsSaveGame]
Stays true during entire game (unlike LevelInfo property)

