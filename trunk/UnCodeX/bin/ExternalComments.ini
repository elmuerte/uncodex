[Core.Object.MaxInt]
The maximum positive int value

[Core.Object.ObjectInternal[6]]
Internal variable

[Core.Object.RF_Transactional]
Object flag<br />
Supports editor undo/redo

[Core.Object.RF_Public]
Object Flag<br />
Can be referenced by external package files

[Core.Object.Name]
The name of this object. The string representation of this value is the same like the last part of the object's string representation.

[Core.Object.Class]
The class of this object.

[Core.Object.RF_NotForClient]
ObjectFlag<br />
Don't load for game client.

[Core.Object.RF_NotForEdit]
ObjectFlag<br />
Don't load for editor.

[Core.Object.RF_NotForServer]
ObjectFlag<br />
Don't load for game server.

[Core.Object.RF_Standalone]
ObjectFlag<br />
Keep object around for editing even if unreferenced.

[Core.Object.RF_Transient]
ObjectFlag<br />
Can't be saved or loaded.

[Core.Object.Guid]
A globally unique identifier.

[Core.Object.Vector]
A point or direction vector in 3d space.

[Core.Object.Plane]
A plane definition in 3d space.

[Core.Object.Rotator]
An orthogonal rotation in 3d space.

[Core.Object.Coords]
An arbitrary coordinate system in 3d space.

[Core.Object.Range]
Used to generate random values between Min and Max

[Core.Object.RangeVector]
Vector of Ranges

[Core.Object.Scale]
A scale and sheering.

[Core.Object.ECamOrientation]
Camera orientations for Matinee

[Core.Object.EAxis]
Generic axis enum.

[Core.Object.Box]
A bounding box.

[Core.Object.BoundingVolume]
A bounding box sphere together.

[Core.Object.Matrix]
a 4x4 matrix

[Core.Object.EDetailMode]
Detail mode

[Core.Object.RandRange]
Return a random number within the given range.

[Core.Object.BeginState]
Called immediately when entering a state, while within
the GotoState call that caused the state change.

[Core.Object.EndState]
Called immediately before going out of the current state,
while within the GotoState call that caused the state change.

[Core.Object.Created]
Notifiction for object based classes only (not actors)

[Core.Object.GetItemName]
Returns the string representation of the name of an object without the package prefixes.

[Core.Object.EatStr]
Moves Num elements from Source to Dest

[Core.Object.Quat]
A quaternion.
Quaternions are a mathematical construct that represents a rotation in three dimensions. It is not as intuitive as the Euler angles that are used for most of the rotation within Unrealscript. A rotator, is a rotation using Euler angles and is the "standard" type of rotation within Unrealscript.

[Core.Object.Color]
An RGBA color

[Core.Object.InterpCurvePoint]
A single interpolation point used in the InterpCurve struct. It maps an input value to a particular output value.

[Core.Object.InterpCurve]
A struct which holds output values for a set of input values. The array which is formed is used to query for an interpolated output value for any input value.

[Core.Object.Rand]
Returns a random number ranging from 0 to Max-1.

[Core.Object.Min]
Returns the lower of the two values.

[Core.Object.Max]
Returns the higher of the two values.

[Core.Object.Clamp]
If V is smaller than A, A is returned. If V is larger than B, B is returned. In any other case V is returned.

[Core.Object.Abs]
Returns the absolute value (also known as the modulo) of A, usually written |A|. Eg: Abs(5)== Abs(-5) == 5.

[Core.Object.Sin]
Returns sine( A )

[Core.Object.Cos]
Returns cosine( A )

[Core.Object.Asin]
Inverse sine.

[Core.Object.Acos]
Inverse cosine.

[Core.Object.Tan]
Returns tan( A )

[Core.Object.Loge]
Returns log(A), the natural logarithm

[Core.Object.Sqrt]
Returns the square root of A.

[Core.Object.FRand]
Returns a random number between 0 and 1.

[Core.Object.FMin]
Returns the lower of the two values.

[Core.Object.FMax]
Returns the higher of the two values.

[Core.Object.FClamp]
If V is smaller than A, A is returned. If V is larger than B, B is returned. In any other case V is returned.

[Core.Object.Lerp]
Returns the linear interpolation between A and B.<br />
The return value is calculated through something like this:
<code>(B - A) * Alpha + A</code>

[Core.Object.Smerp]
Returns an Alpha-smooth nonlinear interpolation between A and B.<br />
The return value seems to be calculated through something like this:
<code>(-2 * (B - A) * Alpha ** 3) + (3 * (B - A) * Alpha ** 2) + A</code>

[Core.Object.Ceil]
Returns A rounded off to the next higher whole number, e.g. Ceil(1.8) returns 2, Ceil(-1.8) returns -1, etc. Ceil will always round up while typecasting float to int rounds up for negative numbers and down for positive numbers, i.e. int casts simply discard everything after the decimal point.

[Core.Object.Round]
Returns A rounded off to the nearest whole number, e.g. pass 1.05 and it returns 1.00, 5.5 will return 6.0 etc.

[Core.Object.Len]
Returns the length of a string.

[Core.Object.InStr]
If the string t is found inside S InStr returns the starting position with the first character of S being 0. If t is not found InStr returns -1.

[Core.Object.Mid]
Returns the middle part of S, starting at character i and including j characters (or all of them if j is not specified). Note: the 1st char has the number 0, this is diffrent then in visual basic, where the 1st char is 1.

[Core.Object.Left]
Returns the <code>i</code> leftmost characters of <code>S</code>.

[Core.Object.Right]
Returns the i rightmost characters of S.

[Core.Object.Caps]
Returns S converted to uppercase.

[Core.Object.Chr]
Returns the character matchin the given ASCII code.

[Core.Object.Asc]
Returns the ASCII code of the first character in S.

[Core.Object.Divide]
Divides a string and returns the two parts.

[Core.Object.Split]
Splits a string iat the specified divider and returns the parts as a dynamic array of strings. If the input string starts with the given divider, the first element of the output array will be empty.

